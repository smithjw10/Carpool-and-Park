@using System.ComponentModel.DataAnnotations
@using FITCarpoolWebApp.Components.Account.Pages
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using FITCarpoolWebApp.Data
@using MudBlazor
@using Radzen.Blazor
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>
    <MudText Typo="Typo.h4" Align="Align.Center">Welcome!</MudText>
    <MudText Typo="Typo.h5" Align="Align.Center">
        Welcome to FIT Carpool Group Finder, where commuting just got a lot easier for students like you! Log in to connect with classmates and make your journey to class a breeze!
    </MudText>


    <StatusMessage Message="@errorMessage" />
<EditForm Model="Input" OnValidSubmit="LoginUser" FormName="loginForm">
    <DataAnnotationsValidator />
    <hr />
    <ValidationSummary class="text-danger" role="alert" />

    <div class="form-floating mb-3">
        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
        <label for="email" class="form-label">Email</label>
        <ValidationMessage For="() => Input.Email" class="text-danger" />
    </div>

    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
        <label for="password" class="form-label">Password</label>
        <ValidationMessage For="() => Input.Password" class="text-danger" />
    </div>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <label class="form-label mb-0">
            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
            Remember me
        </label>
        <p class="mb-0">
            <a href="Account/ForgotPassword" style="color: #4A148C; font-weight: bold;">Forgot your password?</a>
        </p>
    </div>

    <div>
        <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
    </div>

    <div>
        <hr />
        <p>
            Don't have an account?
            <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" style="color: #4A148C; font-weight: bold;">Sign Up</a>
        </p>
        <p>
            Didn't get an E-Mail?
            <a href="Account/ResendEmailConfirmation" style="color: #4A148C; font-weight: bold;">Resend E-Mail Confirmation</a>
        </p>
    </div>
</EditForm>

@code {
    private string? errorMessage;


    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Use SignInManager to ensure a clean login process
        await SignInManager.SignOutAsync();
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}