@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using DataAccessLibrary.Data.Database
@using DataAccessLibrary.Model
@using DataAccessLibrary.Model.Database_Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FITCarpoolWebApp.Data
@inject Radzen.DialogService DialogService
@inject HttpClient httpClient
@inject IUsersData _dbUsers
@inject IPreferencesData _dbPrefs
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@page "/Preferences"
<h3>Update Group Preferences</h3>
<RadzenStack>
    <RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:100%">
        @if (InputModelPref != null && !_loading)
        {
            <RadzenStack>
                <MudText Typo="Typo.h3" Align="Align.Left">Safety Preferences</MudText>

                <RadzenLabel Text="Select Rider Gender Preference" Component="DropDownBindValue" Style="margin-right: 8px; vertical-align: middle;" />
                <RadzenDropDown @bind-Value=@InputModelPref.GenderPreference Data=@genderValues Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />

                <MudText Typo="Typo.h3" Align="Align.Left" Style="padding-top: 15px;">Cleanliness Preferences</MudText>

                <RadzenLabel Text="Select Car Eating Preference" Component="DropDownBindValue" Style="margin-right: 8px; vertical-align: middle;" />
                <RadzenDropDown @bind-Value=@InputModelPref.EatingPreference Data=@carEatingValues Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />
                <RadzenLabel Text="Select Car Smoking Preference" Component="DropDownBindValue" Style="margin-right: 8px; vertical-align: middle;" />
                <RadzenDropDown @bind-Value=@InputModelPref.SmokingPreference Data=@carSmokingValues Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />

                <MudText Typo="Typo.h3" Align="Align.Left" Style="padding-top: 15px;">Comfort Preferences</MudText>
                <RadzenLabel Text="Music Preferences" Component="MusicCheck" Style="margin-right: 8px; vertical-align: middle;" />
                <MudStack Row="true">
                    <RadzenCheckBox Name="MusicCheck" TValue="bool" Change=@(args => _noMusicPreference = args) Value=_noMusicPreference></RadzenCheckBox>
                    <span> No Music Preference </span>

                </MudStack>
      

                @if (!_noMusicPreference)
                {
                        <RadzenLabel Text="Select Music Preferences" Component="DropDownMultiple" Style="margin-right: 8px; vertical-align: middle;" />
                        <RadzenDropDown @bind-Value="@selectedMusicGenres" Data="@musicGenres" Multiple="true" AllowClear="true" Placeholder="Select Music Preferences"
                                        Style="width: 100%; max-width: 400px;" TextProperty="Name" ValueProperty="Id" Name="DropDownMultiple" />
                }
                <RadzenLabel Text="Select Car Temperature Preference" Component="DropDownBindValue" Style="margin-right: 8px; vertical-align: middle;" />
                <RadzenDropDown @bind-Value=@InputModelPref.TemperaturePreference Data=@carTempValues Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />
                <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 20px; margin-top: 20px;">
                    <RadzenButton IsBusy=@_busyUpdate Click=@(args => UpdateUserData()) Text="Update Profile Data" ButtonStyle="ButtonStyle.Primary" Style="margin-right: 10px;" />
                </div>

            </RadzenStack>
        } else if(_loading)
        {
            <div style="display: flex; justify-content: center; align-items: center; height: 100%;">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else
        {
            @*Error Section*@
            <MudText Typo="Typo.h6">Your account was created before full integration, please delete your account under user management and create a new account</MudText>
        }

    </RadzenCard> 
</RadzenStack>

@code {
    // Data Storing variables 
    private List<UsersModel> UserList = null;
    private List<PreferencesModel> PrefList = null;
    List<string> selectedMusicGenres = new List<string>();
    private UsersModel SignedOnUser = null;
    private PreferencesModel InputModelPref = null;
    private bool _loading = true;
    private string userName = "Not found";
    bool _busyUpdate = false;
    private bool _noMusicPreference = true;
    // Data for select statments 
    IEnumerable<string> genderValues = new string[] { "No Preference", "Women and Non-binary Only", "Same Gender", "Non-binary Only" };
    IEnumerable<string> carEatingValues = new string[] { "No Preference", "Vehicle allows eating", "Vehicle does not allow eating" };
    IEnumerable<string> carSmokingValues = new string[] { "No Preference", "Vehicle allows smoking", "Vehicle does not allow smoking" };
    IEnumerable<string> carTempValues = new string[] { "No Preference", "Warmer", "Colder" };
    IEnumerable<MusicGenre> musicGenres = new List<MusicGenre>
    {
        new MusicGenre { Id = "2", Name = "Pop" },
        new MusicGenre { Id = "3", Name = "Rock" },
        new MusicGenre { Id = "4", Name = "Hip Hop" },
        new MusicGenre { Id = "5", Name = "R&B" },
        new MusicGenre { Id = "6", Name = "Country" },
        new MusicGenre { Id = "7", Name = "Folk" },
        new MusicGenre { Id = "8", Name = "Classical" }
    };

    class MusicGenre
    {
        public string Id { get; set; }
        public string Name { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;

        }
        else
        {
            userName = "Not found";
        }
        UserList = await _dbUsers.GetUser(userName);
        if (UserList.Any())
        {

            // gets the current user id 
            SignedOnUser = UserList.First();
            PrefList = await _dbPrefs.GetPreference(SignedOnUser.UserId);
            if (PrefList.Any())
            {

                // Loads the user preferences if they exist 
                InputModelPref = PrefList.First();
                // Parse the music genre input 
                List<string> CurrMusicPrefs = InputModelPref.MusicPreference.Split(',').ToList();
                if (CurrMusicPrefs.Any() && !CurrMusicPrefs.First().Equals("No Preference"))
                {
                    _noMusicPreference = false;
                    foreach (string x in CurrMusicPrefs)
                    {
                        var genreID = musicGenres.FirstOrDefault(g => g.Name == x)?.Id;
                        Console.WriteLine(x + " " + genreID);

                        if (genreID != null)
                        {
                            selectedMusicGenres.Add(genreID);
                        }
                    }
                }
            }
            else
            {
                string message = $"Failed to load {SignedOnUser.FirstName} {SignedOnUser.LastName} preferences, adding to Database ";
                // Adds the user to the preferences DB if the user is not 
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = message });
                InputModelPref = new PreferencesModel(SignedOnUser.UserId);
                await _dbPrefs.AddUser(InputModelPref.UserId);
            }

        }
        _loading = false;
    }
    async Task UpdateUserData()
    {
        _busyUpdate = true;
        if (_noMusicPreference)
        {
            InputModelPref.MusicPreference = "No Preference";       
        }
        else
        {
            StringBuilder musicPrefs = new StringBuilder();

            foreach (string x in selectedMusicGenres)
            {
                int id = Int32.Parse(x);
                var genreName = musicGenres.FirstOrDefault(g => g.Id == x)?.Name;
                if (genreName != null)
                {
                    musicPrefs.Append($"{genreName},");
                }
            }

            InputModelPref.MusicPreference = musicPrefs.ToString();

        }

        try
        {
            await _dbPrefs.UpdatePreference(InputModelPref);

        }
        catch (Exception ex)
        {
            string message = $"Failed to update {SignedOnUser.FirstName} {SignedOnUser.LastName}. Error {ex.Message} ";
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = message });
        }
        finally
        {
            NavigationManager.NavigateTo("/Preferences", forceLoad: true);
        }

    }


}
