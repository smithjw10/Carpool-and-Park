@page "/Admin/Reviews Management"
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using DataAccessLibrary.Data.Database
@using DataAccessLibrary.Model
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@layout AdminLayout
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject IUsersData _dbUsers
@inject IReviewsData _dbReviews
@inject IDialogService DialogService

<RadzenCard Class="rz-my-12 rz-mx-auto" Style="width:75%">
    <MudDataGrid T="ReviewedUserModel" Items="ReviewedUsersList" Bordered="true" Dense="true" ReadOnly="false" EditMode="MudBlazor.DataGridEditMode.Form ">
        <Columns>
            <TemplateColumn Title="Actions">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteReview(context.Item))" />
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn Title="Reviewed User">
                <CellTemplate>
                    @{
                        var review = context.Item as ReviewedUserModel;
                        <div>@($"{review.User.FirstName} {review.User.LastName}")</div>
                    }
                </CellTemplate>
            </TemplateColumn>
            
            <TemplateColumn Title="Rating">
                <CellTemplate>
                    <MudText>@($"{context.Item.Rating} / 5")</MudText> 
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn Title="Reviews">
                <CellTemplate>
                    @foreach (var reviewText in context.Item.ReviewTexts)
                    {
                        <MudText>@reviewText</MudText>
                    }
                </CellTemplate>
            </TemplateColumn>

        </Columns>
    </MudDataGrid>
</RadzenCard>

@code {
    private List<ReviewedUserModel> ReviewedUsersList = new();

    protected override async Task OnInitializedAsync()
    {
        var users = await _dbUsers.GetAllUser(); 

        foreach (var user in users)
        {
            var reviewTexts = await _dbReviews.GetReviewsText(user.UserId);
            var userRating = user.Rating;

            if (reviewTexts.Count > 0)
            {
                ReviewedUsersList.Add(new ReviewedUserModel
                    {
                        User = user,
                        ReviewTexts = reviewTexts,
                        Rating = userRating
                    });
            }
        }
    }

    async Task DeleteReview(ReviewedUserModel review)
    {
        var parameters = new DialogParameters
            {
                ["ContentText"] = $"Are you sure you want to delete this review for {review.User.FirstName} {review.User.LastName}?",
                ["ButtonText"] = "Delete",
                ["Color"] = Color.Error
            };
        var dialog = DialogService.Show<ConfirmationDialog>("Delete Review", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            foreach (var reviewText in review.ReviewTexts)
            {
                //await _dbReviews.DeleteReview(reviewText);
            }
            ReviewedUsersList.Remove(review);
            StateHasChanged(); 
        }
    }

    public class ReviewedUserModel
    {
        public UsersModel User { get; set; }
        public List<string> ReviewTexts { get; set; }
        public double Rating { get; set; }
    }
}
